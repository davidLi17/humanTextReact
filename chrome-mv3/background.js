var W=Object.defineProperty;var B=(m,h,o)=>h in m?W(m,h,{enumerable:!0,configurable:!0,writable:!0,value:o}):m[h]=o;var U=(m,h,o)=>B(m,typeof h!="symbol"?h+"":h,o);var background=(function(){"use strict";var I,b;function m(a){return a==null||typeof a=="function"?{main:a}:a}const o=(b=(I=globalThis.browser)==null?void 0:I.runtime)!=null&&b.id?globalThis.browser:globalThis.chrome,c={TRANSLATE:"translate",CLEANUP:"cleanup",GET_HISTORY:"getHistory",CLEAR_HISTORY:"clearHistory",DELETE_HISTORY_ITEM:"deleteHistoryItem",IMPORT_HISTORY:"importHistory",UPDATE_TRANSLATION:"updateTranslation",SHOW_TRANSLATION_POPUP:"showTranslationPopup",GET_SELECTED_TEXT:"getSelectedText"},l={baseUrl:"https://ark.cn-beijing.volces.com/api/v3/chat/completions",model:"kimi-k2-250711",temperature:.7,promptTemplate:"System Prompt(系统提示词): 1. 用通俗易懂的中文解释以下内容(就是说人话,如果遇到英文缩写记得解释,比如OKR说成OKR(Object Key Value))。2. 而且输出内容一定要带合乎情理的 Emoji 优化我的阅读体验。3. 对话中不要出现System Prompt里面出现的任何内容,润物细无声。",apiKey:"your_api_key"},S=142;class k{static async getSettings(){try{const t=await o.storage.sync.get(["apiKey","baseUrl","model","temperature","promptTemplate"]);if(Object.keys(t).length>0)return o.storage.local.set(t),{...l,...t};console.log("云端没有设置，尝试从本地获取");const e=await o.storage.local.get(["apiKey","baseUrl","model","temperature","promptTemplate"]);return Object.keys(e).length>0?{...l,...e}:(console.log("使用默认设置"),{...l})}catch(t){console.error("获取云端设置失败，尝试从本地获取:",t);try{const e=await o.storage.local.get(["apiKey","baseUrl","model","temperature","promptTemplate"]);return{...l,...e}}catch(e){console.error("获取本地设置也失败:",e)}return console.log("使用默认设置"),{...l}}}}class _{static async saveCurrentShortcut(){try{const e=(await o.commands.getAll()).find(n=>n.name==="translate-selection"),r=e&&e.shortcut?e.shortcut:"";o.storage.local.set({saved_shortcut:r},()=>{console.log("快捷键已保存:",r)})}catch(t){console.error("保存快捷键信息失败:",t)}}static async executeTranslation(){try{console.log("快捷键翻译被触发");const e=(await o.tabs.query({active:!0,currentWindow:!0}))[0];e!=null&&e.id&&(console.log("向content script发送获取选中文本的消息"),await o.tabs.sendMessage(e.id,{action:"getSelectedText"}))}catch(t){console.error("执行快捷键翻译失败:",t)}}}class A{static createContextMenu(){try{o.contextMenus.removeAll(()=>{o.contextMenus.create({id:"translateSelection",title:"翻译成人话",contexts:["selection"]})})}catch(t){console.error("创建右键菜单时出错:",t),o.contextMenus.create({id:"translateSelection",title:"翻译成人话",contexts:["selection"]})}}}class d{static createRequest(t){if(t&&this.activeRequests.has(t)){const r=this.activeRequests.get(t);r==null||r.abort(),this.activeRequests.delete(t)}const e=new AbortController;return t&&this.activeRequests.set(t,e),e}static cleanupRequest(t){if(this.activeRequests.has(t)){const e=this.activeRequests.get(t);e==null||e.abort(),this.activeRequests.delete(t)}}static completeRequest(t){t&&this.activeRequests.delete(t)}static isRequestActive(t){return this.activeRequests.has(t)}}U(d,"activeRequests",new Map);class f{static async saveTranslationHistory(t,e,r){try{let i=(await o.storage.local.get(["translationHistory"])).translationHistory||[];const s={original:t,translated:e,reasoning:r||"",hasReasoning:!!r,timestamp:Date.now()};i.unshift(s),i.length>S&&(i=i.slice(0,S)),await o.storage.local.set({translationHistory:i})}catch(n){throw console.error("保存翻译历史失败:",n),n}}static async getTranslationHistory(){try{return(await o.storage.local.get(["translationHistory"])).translationHistory||[]}catch(t){return console.error("获取翻译历史失败:",t),[]}}static async deleteHistoryItem(t){try{let r=(await o.storage.local.get(["translationHistory"])).translationHistory||[];return r=r.filter(n=>n.original!==t),await o.storage.local.set({translationHistory:r}),!0}catch(e){throw console.error("删除历史记录项失败:",e),e}}static async clearHistory(){try{return await o.storage.local.set({translationHistory:[]}),!0}catch(t){throw console.error("清空历史记录失败:",t),t}}static async importHistory(t){try{if(!Array.isArray(t))throw new Error("导入的数据格式不正确");const e=t.filter(u=>u&&typeof u.original=="string"&&typeof u.translated=="string");if(e.length===0)throw new Error("没有有效的历史记录数据");let n=(await o.storage.local.get(["translationHistory"])).translationHistory||[];const s=[...e,...n].slice(0,S);return await o.storage.local.set({translationHistory:s}),!0}catch(e){throw console.error("导入历史记录失败:",e),e}}}class K{static async testApiConnection(t,e,r){var n;if(!t)throw new Error("API Key不能为空");try{const i=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify({model:r,messages:[{role:"user",content:"test"}],temperature:.1,max_tokens:5})});if(!i.ok){const s=await i.text();throw i.status===401?new Error("API Key无效或已过期"):i.status===404?new Error("API地址或模型不存在"):i.status===429?new Error("请求频率过高，请稍后重试"):new Error(`API请求失败: ${i.status} ${s}`)}return!0}catch(i){throw i.name==="AbortError"?new Error("请求超时"):(n=i.message)!=null&&n.includes("Failed to fetch")?new Error("网络连接失败，请检查API地址"):i}}}class T{static async safeSendMessage(t,e){try{await o.tabs.sendMessage(t,e)}catch(r){console.log("发送消息失败（可能是popup已关闭）:",r)}}static sendRuntimeMessage(t,e){o.runtime.sendMessage(t,()=>{o.runtime.lastError&&(console.log("runtime消息发送失败:",o.runtime.lastError),e==null||e())})}}class x{static async translateText(t,e){const r=d.createRequest(e),n=await k.getSettings();if(!n.apiKey)throw new Error("请先在设置中配置 API Key");const i=n.promptTemplate||l.promptTemplate;try{const s=await fetch(n.baseUrl||l.baseUrl,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n.apiKey}`},body:JSON.stringify({model:n.model||l.model,messages:[{role:"system",content:i},{role:"user",content:t}],temperature:n.temperature||l.temperature,stream:!0}),signal:r.signal});if(!s.ok)throw new Error(`API 请求失败: ${s.status}`);const u=s.body.getReader(),q=new TextDecoder("utf-8");let H="",y="",w="";for(;;){const{value:R,done:G}=await u.read();if(G)break;H+=q.decode(R,{stream:!0});const L=H.split(`
`);H=L.pop()||"";let M="",O="";for(const P of L)if(P.startsWith("data: ")){const N=P.slice(6);if(N==="[DONE]")continue;try{const g=JSON.parse(N);if(g.choices&&g.choices.length>0&&g.choices[0].delta&&g.choices[0].delta.content!==void 0){const v=g.choices[0].delta.content;if(v!=null&&(M+=v),g.choices[0].delta.reasoning_content!==void 0){const C=g.choices[0].delta.reasoning_content;C!=null&&(O+=C)}}}catch(g){console.error("解析错误:",g,"原始数据:",P)}}(M||O)&&(y+=M,w+=O,await this.sendTranslationUpdate(e,y,w,!1))}if(await this.sendTranslationUpdate(e,y,w,!0),y)try{await f.saveTranslationHistory(t,y,w)}catch(R){console.error("保存翻译历史失败:",R)}return d.completeRequest(e),y}catch(s){if(s.name==="AbortError"){console.log("翻译请求已中止");return}if(s.message.includes("Receiving end does not exist")){console.log("连接已断开，可能是页面已关闭");return}if(s.message.includes("API Key")||s.message.includes("API 请求失败")||s.message.includes("rate limit"))throw s;console.error("翻译过程中出现错误:",s)}}static async sendTranslationUpdate(t,e,r,n){const i={action:c.UPDATE_TRANSLATION,content:e,hasReasoning:r.length>0,reasoningContent:r,done:n};if(t)await T.safeSendMessage(t,i);else{let s=!1;if(T.sendRuntimeMessage(i,()=>{s=!0}),s&&!n){d.cleanupRequest(t||0);return}}}}class D{static handleRuntimeMessage(t,e,r){var n,i;if(t.action==="shortcutChanged")return A.createContextMenu(),r({success:!0}),!1;if(t.action===c.GET_HISTORY)return f.getTranslationHistory().then(s=>{r({success:!0,history:s})}).catch(s=>{r({success:!1,error:s.message})}),!0;if(t.action===c.TRANSLATE){const s=(n=e.tab)==null?void 0:n.id;return x.translateText(t.text,s).then(u=>{r({success:!0,result:u})}).catch(u=>{r({success:!1,error:u.message})}),!0}if(t.action===c.SHOW_TRANSLATION_POPUP)return r({success:!0}),!1;if(t.action===c.CLEANUP){const s=(i=e.tab)==null?void 0:i.id;return s&&d.cleanupRequest(s),r({success:!0}),!1}return t.action===c.DELETE_HISTORY_ITEM?(f.deleteHistoryItem(t.original).then(s=>{r({success:s})}).catch(s=>{r({success:!1,error:s.message})}),!0):t.action===c.CLEAR_HISTORY?(f.clearHistory().then(s=>{r({success:s})}).catch(s=>{r({success:!1,error:s.message})}),!0):t.action===c.IMPORT_HISTORY?(f.importHistory(t.history).then(s=>{r({success:s})}).catch(s=>{r({success:!1,error:s.message})}),!0):t.action==="testApiConnection"?(K.testApiConnection(t.apiKey,t.baseUrl,t.model).then(s=>{r({success:!0})}).catch(s=>{r({success:!1,error:s.message})}),!0):!1}}class Y{static async handleContextMenuClick(t,e){if(t.menuItemId==="translateSelection"&&(e!=null&&e.id))try{const r=t.selectionText;r&&(await T.safeSendMessage(e.id,{action:c.SHOW_TRANSLATION_POPUP,text:r}),await x.translateText(r,e.id))}catch(r){console.error("翻译失败:",r),await T.safeSendMessage(e.id,{action:c.UPDATE_TRANSLATION,error:r.message,done:!0})}}}const $=m(()=>{var a;console.log("人话翻译器 background script 启动",{id:o.runtime.id}),o.runtime.onInstalled.addListener(()=>{_.saveCurrentShortcut(),A.createContextMenu()}),o.runtime.onStartup.addListener(()=>{A.createContextMenu()}),o.contextMenus.onClicked.addListener(Y.handleContextMenuClick),o.runtime.onMessage.addListener(D.handleRuntimeMessage),o.tabs.onRemoved.addListener(t=>{d.cleanupRequest(t)}),(a=o.commands)!=null&&a.onCommand&&o.commands.onCommand.addListener(t=>{t==="translate-selection"&&_.executeTranslation()})});function J(){}function p(a,...t){}const j={debug:(...a)=>p(console.debug,...a),log:(...a)=>p(console.log,...a),warn:(...a)=>p(console.warn,...a),error:(...a)=>p(console.error,...a)};let E;try{E=$.main(),E instanceof Promise&&console.warn("The background's main() function return a promise, but it must be synchronous")}catch(a){throw j.error("The background crashed on startup!"),a}return E})();
